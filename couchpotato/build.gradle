buildscript {
  repositories {
    mavenCentral()
    maven { url 'http://download.crashlytics.com/maven' }
    maven { url "https://github.com/ben-manes/gradle-versions-plugin/raw/mvnrepo" }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.10.+'
    classpath 'com.jakewharton.hugo:hugo-plugin:1.1.+'
    classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.10.+'
    classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:+'
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.2'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.5-beta-2'
  }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'android'
apply plugin: 'checkstyle'
apply plugin: 'hugo'
apply plugin: 'crashlytics'
apply plugin: 'android-apt'
apply plugin: 'versions'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
// bump for dogfood builds, public betas, etc.
def versionBuild = 0

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

android {
  compileSdkVersion 19
  buildToolsVersion '19.0.3'

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  lintOptions {
    abortOnError false
  }

  testBuildType "debug"

  signingConfigs {
    release {
      storeFile file('keystore.jks')
      storePassword 'couchpotato'
      keyAlias 'couchpotato'
      keyPassword 'couchpotato'
    }
  }

  buildTypes {
    debug {
      packageNameSuffix ".debug"
      versionNameSuffix "-debug"
    }
    release {
      signingConfig signingConfigs.release
      runProguard false
    }
  }

  defaultConfig {
    minSdkVersion 19
    targetSdkVersion 19

    packageName "com.f2prateek.couchpotato"
    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }
}

dependencies {
  repositories {
    maven { url 'http://download.crashlytics.com/maven' }
  }

  releaseCompile 'com.crashlytics.android:crashlytics:+'

  compile 'com.android.support:support-v4:19.1.+'
  compile 'com.android.support:support-v13:19.1.+'

  compile 'com.squareup.dagger:dagger:1.2.+'
  apt 'com.squareup.dagger:dagger-compiler:1.2.+'

  compile 'com.squareup.retrofit:retrofit:1.5.+'
  compile 'com.squareup.okhttp:okhttp:1.5.+'
  compile 'com.squareup.picasso:picasso:2.2.+'

  compile 'com.netflix.rxjava:rxjava-core:0.18.+'
  compile 'com.netflix.rxjava:rxjava-android:0.18.+'

  compile 'com.jakewharton:butterknife:5.1.+'
  compile 'com.f2prateek.ln:ln:1.1.+'
  compile 'com.f2prateek.dart:dart:1.1.+'
  compile 'com.github.frankiesardo:android-auto-value:+'
  apt 'com.github.frankiesardo:android-auto-value-processor:+'
  compile 'com.squareup:otto:1.3.+'

  compile 'de.keyboardsurfer.android.widget:crouton:1.8.+'
  compile 'com.github.castorflex.smoothprogressbar:library:0.5.+'
  compile 'com.astuetz:pagerslidingtabstrip:1.0.1'

  compile 'com.squareup.phrase:phrase:1.0.+'

  debugCompile 'com.jakewharton.madge:madge:1.1.+'
  debugCompile 'com.jakewharton.scalpel:scalpel:1.1.+'
}

checkstyle {
  configFile project.file('../checkstyle.xml')
  showViolations true
}

task release << {
  def gitStatus = 'git status --porcelain'.execute([], project.rootDir).text.trim()
  if (gitStatus?.trim()) {
    println gitStatus
    throw new GradleException('You have unstaged files. Commit them first.')
  }
  "git tag v${android.defaultConfig.versionName}".execute([], project.rootDir)
}
release.dependsOn 'build'

android.applicationVariants.all { variant ->
  def name = variant.buildType.name

  // Checkstyle
  def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
  checkstyle.dependsOn variant.javaCompile
  checkstyle.source variant.javaCompile.source
  checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
  checkstyle.exclude('**/BuildConfig.java')
  checkstyle.exclude('**/R.java')
  // Dagger, ButterKnife, Dart
  checkstyle.exclude('**/*\$\$*.java')
  // Space Needed after opening parenthesis?
  checkstyle.exclude('**/ForegroundAspectRatioImageView.java')
  checkstyle.exclude('**/MedianCutQuantizer.java')
  project.tasks.getByName("check").dependsOn checkstyle

  // Rename apk
  def apk = variant.packageApplication.outputFile;
  def newName = apk.name.replace(".apk",
      "-v${android.defaultConfig.versionName}-${versionBuild}.apk");
  newName = newName.replace("app", "${android.defaultConfig.packageName}");
  variant.packageApplication.outputFile = new File(apk.parentFile, newName);
  if (variant.zipAlign) {
    variant.zipAlign.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
  }
}