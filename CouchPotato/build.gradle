buildscript {
  repositories {
    mavenCentral()
    maven { url 'http://download.crashlytics.com/maven' }
  }
  dependencies {
    classpath group: 'com.android.tools.build', name: 'gradle', version: '0.7.+'
    classpath group: 'com.crashlytics.tools.gradle', name: 'crashlytics-gradle', version: '1.+'
  }
}

apply plugin: 'android'
apply plugin: 'checkstyle'
apply plugin: 'crashlytics'

dependencies {
  repositories {
    mavenCentral()
    maven { url 'http://download.crashlytics.com/maven' }
  }

  compile fileTree(dir: 'libs', include: '*.jar')

  compile 'com.android.support:support-v4:18.0.+'
  compile 'com.android.support:support-v13:18.0.+'
  compile 'com.crashlytics.android:crashlytics:1.+'
  compile 'com.jakewharton:butterknife:3.0.+'
  compile 'com.squareup:tape:1.1.+'
  compile 'com.squareup:otto:1.3.+'
  compile 'com.squareup.picasso:picasso:2.1.+'
  compile 'com.squareup.dagger:dagger:1.1.+'
  compile 'com.squareup.retrofit:retrofit:1.2.+'
  compile 'com.google.guava:guava:15.+'
  compile 'de.keyboardsurfer.android.widget:crouton:1.8.2@aar'
  compile 'com.f2prateek.ln:ln:1.1.+'
  compile 'com.f2prateek.dart:dart:1.0.+'
  compile 'com.jakewharton.scalpel:scalpel:1.1.+'
  compile 'com.squareup.okhttp:okhttp:1.2.+'
  compile 'com.squareup.dagger:dagger-compiler:1.1.+'
  instrumentTestCompile 'com.squareup:fest-android:1.0.+'
  instrumentTestCompile 'com.squareup.spoon:spoon-client:1.1.+'
}

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
// bump for dogfood builds, public betas, etc.
def versionBuild = 0

android {
  compileSdkVersion 19
  buildToolsVersion '19.0.1'

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  testBuildType "debug"

  signingConfigs {
    release {
      storeFile file("keystore")
      storePassword "notYourRealPassword"
      keyAlias "keystore"
      keyPassword "notYourRealPassword"
    }
  }

  buildTypes {
    debug {
      packageNameSuffix ".debug"
      versionNameSuffix "-debug"
    }
    release {
      signingConfig signingConfigs.release
    }
    beta.initWith(buildTypes.release)
    beta {
      versionNameSuffix "-beta"
      debuggable true
    }
    sourceSets.beta.setRoot('src/release')

    applicationVariants.all { variant ->
      apk = variant.packageApplication.outputFile;
      newName = apk.name.replace(".apk", "-v${defaultConfig.versionName}-${versionBuild}.apk");
      newName = newName.replace("app", "${defaultConfig.packageName}");
      variant.packageApplication.outputFile = new File(apk.parentFile, newName);
      if (variant.zipAlign) {
        variant.zipAlign.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
      }
    }
  }

  defaultConfig {
    minSdkVersion 16
    targetSdkVersion 19
    packageName "com.f2prateek.couchpotato"
    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"
  }
}

task askForPasswords << {
  def storePassword = new String(System.console().readLine("\n\$ Enter keystore password: "))
  def keyPassword = new String(System.console().readLine("\n\$ Enter key alias password: "))
  android.signingConfigs.release.storePassword = storePassword
  android.signingConfigs.release.keyPassword = keyPassword
}

tasks.whenTaskAdded { theTask ->
  if (theTask.name.equals("validateReleaseSigning")) {
    theTask.dependsOn "askForPasswords"
  }
}

checkstyle {
  configFile project.file('../checkstyle.xml')
  showViolations true
}

android.applicationVariants.all { variant ->
  def name = variant.buildType.name

  def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
  checkstyle.dependsOn variant.javaCompile
  checkstyle.source variant.javaCompile.source
  checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
  checkstyle.exclude('**/BuildConfig.java')
  checkstyle.exclude('**/R.java')
  checkstyle.exclude('**/SafeAsyncTask.java')
  project.tasks.getByName("check").dependsOn checkstyle
}
